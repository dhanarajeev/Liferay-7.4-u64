/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.goldisan.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.goldisan.model.Personal;
import com.liferay.goldisan.model.PersonalModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Personal service. Represents a row in the &quot;lr_Personal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersonalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersonalImpl
 * @generated
 */
@JSON(strict = true)
public class PersonalModelImpl
	extends BaseModelImpl<Personal> implements PersonalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a personal model instance should use the <code>Personal</code> interface instead.
	 */
	public static final String TABLE_NAME = "lr_Personal";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"personId", Types.BIGINT},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"phoneNumber", Types.BIGINT},
		{"createPassword", Types.VARCHAR}, {"conformPassword", Types.VARCHAR},
		{"address", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createPassword", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("conformPassword", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lr_Personal (uuid_ VARCHAR(75) null,personId LONG not null primary key,firstName VARCHAR(75) null,lastName VARCHAR(75) null,emailAddress VARCHAR(75) null,phoneNumber LONG,createPassword VARCHAR(75) null,conformPassword VARCHAR(75) null,address VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table lr_Personal";

	public static final String ORDER_BY_JPQL =
		" ORDER BY personal.personId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lr_Personal.personId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PERSONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PersonalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _personId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _personId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Personal.class;
	}

	@Override
	public String getModelClassName() {
		return Personal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Personal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Personal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Personal, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Personal)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Personal, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Personal, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Personal)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Personal, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Personal, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Personal, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Personal, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Personal, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Personal, Object>>();
		Map<String, BiConsumer<Personal, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Personal, ?>>();

		attributeGetterFunctions.put("uuid", Personal::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Personal, String>)Personal::setUuid);
		attributeGetterFunctions.put("personId", Personal::getPersonId);
		attributeSetterBiConsumers.put(
			"personId", (BiConsumer<Personal, Long>)Personal::setPersonId);
		attributeGetterFunctions.put("firstName", Personal::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Personal, String>)Personal::setFirstName);
		attributeGetterFunctions.put("lastName", Personal::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Personal, String>)Personal::setLastName);
		attributeGetterFunctions.put("emailAddress", Personal::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<Personal, String>)Personal::setEmailAddress);
		attributeGetterFunctions.put("phoneNumber", Personal::getPhoneNumber);
		attributeSetterBiConsumers.put(
			"phoneNumber",
			(BiConsumer<Personal, Long>)Personal::setPhoneNumber);
		attributeGetterFunctions.put(
			"createPassword", Personal::getCreatePassword);
		attributeSetterBiConsumers.put(
			"createPassword",
			(BiConsumer<Personal, String>)Personal::setCreatePassword);
		attributeGetterFunctions.put(
			"conformPassword", Personal::getConformPassword);
		attributeSetterBiConsumers.put(
			"conformPassword",
			(BiConsumer<Personal, String>)Personal::setConformPassword);
		attributeGetterFunctions.put("address", Personal::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Personal, String>)Personal::setAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getPersonId() {
		return _personId;
	}

	@Override
	public void setPersonId(long personId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_personId = personId;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public long getPhoneNumber() {
		return _phoneNumber;
	}

	@Override
	public void setPhoneNumber(long phoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getCreatePassword() {
		if (_createPassword == null) {
			return "";
		}
		else {
			return _createPassword;
		}
	}

	@Override
	public void setCreatePassword(String createPassword) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createPassword = createPassword;
	}

	@JSON
	@Override
	public String getConformPassword() {
		if (_conformPassword == null) {
			return "";
		}
		else {
			return _conformPassword;
		}
	}

	@Override
	public void setConformPassword(String conformPassword) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_conformPassword = conformPassword;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Personal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Personal toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Personal>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonalImpl personalImpl = new PersonalImpl();

		personalImpl.setUuid(getUuid());
		personalImpl.setPersonId(getPersonId());
		personalImpl.setFirstName(getFirstName());
		personalImpl.setLastName(getLastName());
		personalImpl.setEmailAddress(getEmailAddress());
		personalImpl.setPhoneNumber(getPhoneNumber());
		personalImpl.setCreatePassword(getCreatePassword());
		personalImpl.setConformPassword(getConformPassword());
		personalImpl.setAddress(getAddress());

		personalImpl.resetOriginalValues();

		return personalImpl;
	}

	@Override
	public Personal cloneWithOriginalValues() {
		PersonalImpl personalImpl = new PersonalImpl();

		personalImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		personalImpl.setPersonId(this.<Long>getColumnOriginalValue("personId"));
		personalImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		personalImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		personalImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		personalImpl.setPhoneNumber(
			this.<Long>getColumnOriginalValue("phoneNumber"));
		personalImpl.setCreatePassword(
			this.<String>getColumnOriginalValue("createPassword"));
		personalImpl.setConformPassword(
			this.<String>getColumnOriginalValue("conformPassword"));
		personalImpl.setAddress(this.<String>getColumnOriginalValue("address"));

		return personalImpl;
	}

	@Override
	public int compareTo(Personal personal) {
		long primaryKey = personal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Personal)) {
			return false;
		}

		Personal personal = (Personal)object;

		long primaryKey = personal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Personal> toCacheModel() {
		PersonalCacheModel personalCacheModel = new PersonalCacheModel();

		personalCacheModel.uuid = getUuid();

		String uuid = personalCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			personalCacheModel.uuid = null;
		}

		personalCacheModel.personId = getPersonId();

		personalCacheModel.firstName = getFirstName();

		String firstName = personalCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			personalCacheModel.firstName = null;
		}

		personalCacheModel.lastName = getLastName();

		String lastName = personalCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			personalCacheModel.lastName = null;
		}

		personalCacheModel.emailAddress = getEmailAddress();

		String emailAddress = personalCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			personalCacheModel.emailAddress = null;
		}

		personalCacheModel.phoneNumber = getPhoneNumber();

		personalCacheModel.createPassword = getCreatePassword();

		String createPassword = personalCacheModel.createPassword;

		if ((createPassword != null) && (createPassword.length() == 0)) {
			personalCacheModel.createPassword = null;
		}

		personalCacheModel.conformPassword = getConformPassword();

		String conformPassword = personalCacheModel.conformPassword;

		if ((conformPassword != null) && (conformPassword.length() == 0)) {
			personalCacheModel.conformPassword = null;
		}

		personalCacheModel.address = getAddress();

		String address = personalCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			personalCacheModel.address = null;
		}

		return personalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Personal, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Personal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Personal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Personal)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Personal>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Personal.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _personId;
	private String _firstName;
	private String _lastName;
	private String _emailAddress;
	private long _phoneNumber;
	private String _createPassword;
	private String _conformPassword;
	private String _address;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Personal, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Personal)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("personId", _personId);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("phoneNumber", _phoneNumber);
		_columnOriginalValues.put("createPassword", _createPassword);
		_columnOriginalValues.put("conformPassword", _conformPassword);
		_columnOriginalValues.put("address", _address);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("personId", 2L);

		columnBitmasks.put("firstName", 4L);

		columnBitmasks.put("lastName", 8L);

		columnBitmasks.put("emailAddress", 16L);

		columnBitmasks.put("phoneNumber", 32L);

		columnBitmasks.put("createPassword", 64L);

		columnBitmasks.put("conformPassword", 128L);

		columnBitmasks.put("address", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Personal _escapedModel;

}