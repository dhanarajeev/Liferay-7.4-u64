/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.lr.goldisannew.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.lr.goldisannew.model.Store;
import com.lr.goldisannew.model.StoreModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Store service. Represents a row in the &quot;lr_Store&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StoreModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StoreImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StoreImpl
 * @generated
 */
@JSON(strict = true)
public class StoreModelImpl extends BaseModelImpl<Store> implements StoreModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a store model instance should use the <code>Store</code> interface instead.
	 */
	public static final String TABLE_NAME = "lr_Store";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"storeId", Types.BIGINT},
		{"branchId", Types.BIGINT}, {"branchName", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"contactNumber", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("storeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("branchId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("branchName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lr_Store (uuid_ VARCHAR(75) null,storeId LONG not null primary key,branchId LONG,branchName VARCHAR(75) null,address VARCHAR(75) null,contactNumber LONG)";

	public static final String TABLE_SQL_DROP = "drop table lr_Store";

	public static final String ORDER_BY_JPQL = " ORDER BY store.storeId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY lr_Store.storeId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STOREID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StoreModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _storeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStoreId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _storeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Store.class;
	}

	@Override
	public String getModelClassName() {
		return Store.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Store, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Store, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Store, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Store)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Store, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Store, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Store)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Store, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Store, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Store, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Store, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Store, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Store, Object>>();
		Map<String, BiConsumer<Store, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Store, ?>>();

		attributeGetterFunctions.put("uuid", Store::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Store, String>)Store::setUuid);
		attributeGetterFunctions.put("storeId", Store::getStoreId);
		attributeSetterBiConsumers.put(
			"storeId", (BiConsumer<Store, Long>)Store::setStoreId);
		attributeGetterFunctions.put("branchId", Store::getBranchId);
		attributeSetterBiConsumers.put(
			"branchId", (BiConsumer<Store, Long>)Store::setBranchId);
		attributeGetterFunctions.put("branchName", Store::getBranchName);
		attributeSetterBiConsumers.put(
			"branchName", (BiConsumer<Store, String>)Store::setBranchName);
		attributeGetterFunctions.put("address", Store::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Store, String>)Store::setAddress);
		attributeGetterFunctions.put("contactNumber", Store::getContactNumber);
		attributeSetterBiConsumers.put(
			"contactNumber", (BiConsumer<Store, Long>)Store::setContactNumber);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getStoreId() {
		return _storeId;
	}

	@Override
	public void setStoreId(long storeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_storeId = storeId;
	}

	@JSON
	@Override
	public long getBranchId() {
		return _branchId;
	}

	@Override
	public void setBranchId(long branchId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_branchId = branchId;
	}

	@JSON
	@Override
	public String getBranchName() {
		if (_branchName == null) {
			return "";
		}
		else {
			return _branchName;
		}
	}

	@Override
	public void setBranchName(String branchName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_branchName = branchName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public long getContactNumber() {
		return _contactNumber;
	}

	@Override
	public void setContactNumber(long contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Store.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Store toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Store>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StoreImpl storeImpl = new StoreImpl();

		storeImpl.setUuid(getUuid());
		storeImpl.setStoreId(getStoreId());
		storeImpl.setBranchId(getBranchId());
		storeImpl.setBranchName(getBranchName());
		storeImpl.setAddress(getAddress());
		storeImpl.setContactNumber(getContactNumber());

		storeImpl.resetOriginalValues();

		return storeImpl;
	}

	@Override
	public Store cloneWithOriginalValues() {
		StoreImpl storeImpl = new StoreImpl();

		storeImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		storeImpl.setStoreId(this.<Long>getColumnOriginalValue("storeId"));
		storeImpl.setBranchId(this.<Long>getColumnOriginalValue("branchId"));
		storeImpl.setBranchName(
			this.<String>getColumnOriginalValue("branchName"));
		storeImpl.setAddress(this.<String>getColumnOriginalValue("address"));
		storeImpl.setContactNumber(
			this.<Long>getColumnOriginalValue("contactNumber"));

		return storeImpl;
	}

	@Override
	public int compareTo(Store store) {
		long primaryKey = store.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Store)) {
			return false;
		}

		Store store = (Store)object;

		long primaryKey = store.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Store> toCacheModel() {
		StoreCacheModel storeCacheModel = new StoreCacheModel();

		storeCacheModel.uuid = getUuid();

		String uuid = storeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			storeCacheModel.uuid = null;
		}

		storeCacheModel.storeId = getStoreId();

		storeCacheModel.branchId = getBranchId();

		storeCacheModel.branchName = getBranchName();

		String branchName = storeCacheModel.branchName;

		if ((branchName != null) && (branchName.length() == 0)) {
			storeCacheModel.branchName = null;
		}

		storeCacheModel.address = getAddress();

		String address = storeCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			storeCacheModel.address = null;
		}

		storeCacheModel.contactNumber = getContactNumber();

		return storeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Store, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Store, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Store, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Store)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Store>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Store.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _storeId;
	private long _branchId;
	private String _branchName;
	private String _address;
	private long _contactNumber;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Store, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Store)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("storeId", _storeId);
		_columnOriginalValues.put("branchId", _branchId);
		_columnOriginalValues.put("branchName", _branchName);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("contactNumber", _contactNumber);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("storeId", 2L);

		columnBitmasks.put("branchId", 4L);

		columnBitmasks.put("branchName", 8L);

		columnBitmasks.put("address", 16L);

		columnBitmasks.put("contactNumber", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Store _escapedModel;

}